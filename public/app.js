const config = {
  peerConfig: {
    host: window.location.hostname,
    port: 9001,
    path: '/peerjs',
    debug: 3
  },
  audioConstraints: {
    audio: {
      echoCancellation: true,
      noiseSuppression: true,
      autoGainControl: true
    }
  }
};

const appState = {
  peer: null,
  currentCall: null,
  localStream: null,
  isConnected: false,
  isMuted: false,
  partnerId: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  initPeerConnection();
  setupEventListeners();
  restoreSession();
});

function initPeerConnection() {
  appState.peer = new Peer(config.peerConfig);

  appState.peer.on('open', id => {
    document.getElementById('myId').textContent = id;
    updateStatus('–ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫—É', 'connected');
  });

  appState.peer.on('call', handleIncomingCall);
  appState.peer.on('error', handlePeerError);
}

async function setupAudio() {
  try {
    appState.localStream = await navigator.mediaDevices.getUserMedia(config.audioConstraints);
  } catch (error) {
    showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
  }
}

function setupEventListeners() {
  document.getElementById('callBtn').addEventListener('click', makeCall);
  document.getElementById('hangupBtn').addEventListener('click', endCall);
  document.getElementById('muteBtn').addEventListener('click', toggleMute);
  document.getElementById('findRandomBtn').addEventListener('click', findPartner);
  document.getElementById('copyIdBtn').addEventListener('click', copyPeerId);
}

async function handleIncomingCall(call) {
  if (appState.isConnected) {
    call.close();
    return;
  }

  if (!appState.localStream) {
    try {
      await setupAudio();
    } catch (error) {
      showAlert('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
      return;
    }
  }

  appState.currentCall = call;
  appState.partnerId = call.peer;
  appState.isConnected = true;
  
  call.answer(appState.localStream);
  updateUI();

  call.on('stream', remoteStream => {
    document.getElementById('remoteAudio').srcObject = remoteStream;
  });

  call.on('close', endCall);
}

async function makeCall() {
  const partnerId = document.getElementById('partnerId').value.trim();
  
  if (!partnerId) {
    showAlert('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞');
    return;
  }

  if (!appState.localStream) {
    try {
      await setupAudio();
    } catch (error) {
      return;
    }
  }

  try {
    appState.currentCall = appState.peer.call(partnerId, appState.localStream);
    appState.partnerId = partnerId;
    appState.isConnected = true;
    updateUI();

    appState.currentCall.on('stream', remoteStream => {
      document.getElementById('remoteAudio').srcObject = remoteStream;
    });

    appState.currentCall.on('close', endCall);
  } catch (error) {
    showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
  }
}

function endCall() {
  if (appState.currentCall) {
    appState.currentCall.close();
  }
  resetCallState();
}

function toggleMute() {
  if (!appState.localStream) return;
  
  appState.isMuted = !appState.isMuted;
  appState.localStream.getAudioTracks().forEach(track => {
    track.enabled = !appState.isMuted;
  });
  updateUI();
}

async function findPartner() {
  if (appState.isConnected) {
    showAlert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä');
    return;
  }

  document.getElementById('searchSpinner').classList.remove('hidden');

  try {
    const response = await fetch(`/find-partner?myId=${appState.peer.id}`);
    const data = await response.json();
    
    if (data.partnerId) {
      document.getElementById('partnerId').value = data.partnerId;
      makeCall();
    } else {
      showAlert(`${data.error || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤'}`);
    }
  } catch (error) {
    showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
  } finally {
    document.getElementById('searchSpinner').classList.add('hidden');
  }
}

function copyPeerId() {
  const id = appState.peer.id;
  navigator.clipboard.writeText(id);
  alert('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
}

function updateUI() {
  const statusElement = document.getElementById('status');
  const callPanel = document.getElementById('activeCallPanel');

  if (appState.isConnected) {
    statusElement.classList.remove('disconnected');
    statusElement.classList.add('connected');
    statusElement.querySelector('.status-text').textContent = '–í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ';
    callPanel.classList.remove('hidden');
    document.getElementById('partnerIdDisplay').textContent = appState.partnerId;
  } else {
    statusElement.classList.remove('connected');
    statusElement.classList.add('disconnected');
    statusElement.querySelector('.status-text').textContent = '–û—Ç–∫–ª—é—á–µ–Ω';
    callPanel.classList.add('hidden');
  }

  document.getElementById('muteBtn').innerHTML = 
    appState.isMuted ? 'üîà <span>–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫</span>' : 'üîá <span>–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫</span>';
}

function resetCallState() {
  document.getElementById('remoteAudio').srcObject = null;
  appState.currentCall = null;
  appState.isConnected = false;
  appState.partnerId = null;
  updateUI();
}

function showAlert(message) {
  alert(message);
}

function restoreSession() {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateStatus(text, status) {
  const statusElement = document.getElementById('status');
  statusElement.querySelector('.status-text').textContent = text;
  statusElement.className = `status-badge ${status}`;
}

function handlePeerError(error) {
  console.error('PeerJS Error:', error);
  showAlert(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.type}`);
}